# EXEMPLE N°1

"""
# Docker container with Python installed
image: nexus.retd.edf.fr/python

# Step of the CI
stages:
    - test
# Stage Pool (Stand de tâches)
test_python_simple:
  stage: test
  script:
    #python -m unittest
    # Run statistics
    coverage run -m unittest
"""


# EXEMPLE N°2

"""
# Docker container with Python installed
image: nexus.retd.edf.fr/python

# Step of the CI
stage:
    - test
# Stage Pool (Stand de tâches)
test_python:
  stage: test
  script:
    # Installation des dépendances avec pip
    # On configure piip pour tout télécharger depuis un serveur R&D
    # (On n'a pas accès à internet depuis les tâches gitlab à la R&D)
    - mkdir -p ~/.pip/
    - printf '[global]\ntrusted-host = nexus.retd.edf.fr\nindex = https://nexus.retd.edf.fr/repository/pypi-all/pypi\nindex-url = #... On voit pas dans la vidéo
    - pip install coverage
    - # DYMOLA

    # Ici on préfère utiliser coverage pour lancer les test
    # En effet, coverage permet de générer un rapport de couverture de code
    - coverage run -m unittest
    - coverage report     # Affichage dans la console de la couverture par les tests
    - coverage xml        # Fichier xml de couverture, exploité par gitlab et sonarqube

# Pour % de couverture global dans la merge request gitlab
coverage: '(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
artifacts:
  # Pour sonarqube
  paths:
    - coverage.xml
  #  Pour affichage dans la merge request gitlab
  reports:
    coverage_report:
      coverage_format: cobertura
      path: coverage.xml
"""

# EXEMPLE N°3

# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."